	  PROGRAM LOAD_BALANCER
	    INCLUDE 'mpif.h'
	    INTEGER*4 MAX_PROC_COUNT,I
	  	DOUBLE PRECISION START_TIME,END_TIME
		INTEGER*4 NUMTASKS,RANK,LEN,IERR,TASK

        
		INTEGER*4 CHUNK(10),ASSIGNED_CHUNK(10)
		INTEGER*4 STATUS_SEND(MPI_STATUS_SIZE)
        INTEGER*4 STATUS_RECV(MPI_STATUS_SIZE)
        INTEGER*4 REQUEST_SEND(10)
        INTEGER*4 REQUEST_RECV(10)

        INTEGER*4 STATUS_SEND_RES(MPI_STATUS_SIZE)
        INTEGER*4 STATUS_RECV_RES(MPI_STATUS_SIZE)
        INTEGER*4 REQUEST_SEND_RES(10)
        INTEGER*4 REQUEST_RECV_RES(10)

        MAX_PROC_COUNT = 10


		ASSIGNED_CHUNK(1) = 1
		ASSIGNED_CHUNK(2) = 2
		ASSIGNED_CHUNK(3) = 3
		ASSIGNED_CHUNK(4) = 4
		ASSIGNED_CHUNK(5) = 5
		ASSIGNED_CHUNK(6) = 6
		ASSIGNED_CHUNK(7) = 8
		ASSIGNED_CHUNK(8) = 8
		ASSIGNED_CHUNK(9) = 9
		ASSIGNED_CHUNK(10) = 10

	  	CALL MPI_INIT (IERR)
		IF (IERR .NE. MPI_SUCCESS) THEN
    		PRINT *,'ERROR STARTING MPI PROGRAM. TERMINATING.'
      		CALL MPI_ABORT(MPI_COMM_WORLD, 1, IERR)
		END IF

   		CALL MPI_COMM_RANK(MPI_COMM_WORLD, RANK, IERR)
   		IF (IERR .NE. MPI_SUCCESS) THEN
    		PRINT *,'ERROR IN TAKING COMM_RANK. TERMINATING.'
      		CALL MPI_ABORT(MPI_COMM_WORLD, 1, IERR)
		END IF
   		CALL MPI_COMM_SIZE(MPI_COMM_WORLD, NUMTASKS, IERR)
		IF (IERR .NE. MPI_SUCCESS) THEN
    		PRINT *,'ERROR IN TAKING COMM_SIZE. TERMINATING.'
      		CALL MPI_ABORT(MPI_COMM_WORLD, 1, IERR)
		END IF

		IF (NUMTASKS .GE. MAX_PROC_COUNT) THEN
			NUMTASKS = MAX_PROC_COUNT
		END IF
C     ======================================================
C     ===============MASTER CODE============================
      IF(RANK .EQ. 0) THEN

      	START_TIME = MPI_WTIME()

		END_TIME = MPI_WTIME()
		PRINT *, 'START TIME:', START_TIME
		DO TASK = 1, NUMTASKS-1
		
		  CALL MPI_ISEND(ASSIGNED_CHUNK(TASK), 1, MPI_INTEGER, TASK, 
     &     0, MPI_COMM_WORLD, REQUEST_SEND(TASK), IERR)
     	  IF (IERR .NE. MPI_SUCCESS) THEN
    		PRINT *,'ERROR IN ISEND. TERMINATING.'
      		CALL MPI_ABORT(MPI_COMM_WORLD, 1, IERR)
		  END IF
     	END DO


     	DO I = 1, NUMTASKS-1
     	 PRINT *, 'Waiting to clear another send buf..'
		 CALL MPI_WAITANY(NUMTASKS-1,REQUEST_SEND,TASK,STATUS_SEND,IERR)
	     IF (IERR .NE. MPI_SUCCESS) THEN
    		PRINT *,'ERROR IN WAIT FOR SEND. TERMINATING.'
      		CALL MPI_ABORT(MPI_COMM_WORLD, 1, IERR)
		 END IF
	     PRINT *, 'Cleared send buf ',TASK
	     
     	END DO
C     ======================================================
C     ===============CLIENT CODE============================
	  ELSE

	    PRINT *, 'NUMBER OF TASKS=',NUMTASKS,' MY RANK=',RANK

	  	CALL MPI_IRECV(CHUNK(RANK), 1, MPI_INTEGER, 0, 0,  
     &     MPI_COMM_WORLD, REQUEST_RECV(RANK), IERR)
         IF (IERR .NE. MPI_SUCCESS) THEN
    		PRINT *,'ERROR IN RECV. TERMINATING.'
      		CALL MPI_ABORT(MPI_COMM_WORLD, 1, IERR)
		 END IF
	  	PRINT *, 'Waiting to ready recv buf ',RANK
	    
	  	CALL MPI_WAIT(REQUEST_RECV(RANK),STATUS_RECV,IERR)
	  	PRINT *, 'Received buf ',RANK
	  	IF (IERR .NE. MPI_SUCCESS) THEN
    		PRINT *,'ERROR IN WAIT FOR RECV. TERMINATING.'
      		CALL MPI_ABORT(MPI_COMM_WORLD, 1, IERR)
		END IF
	  	PRINT *,'TASK=',RANK,' CHUNK=',CHUNK(RANK)
	  	
c       process the chunk here
	  	CALL SLEEP(CHUNK(RANK))

	  ENDIF


	  

	  
	  CALL MPI_FINALIZE(IERR)
	  END